
// This file is auto-generated by pwa_builder.py. Do not edit.
importScripts('https://storage.googleapis.com/workbox-cdn/releases/7.0.0/workbox-sw.js');

const CACHE_NAME_PREFIX = 'pwa-cache';
const CACHE_VERSION = '36bee921';

if (workbox) {
    console.log(`Workbox is loaded.`);
    
    // Set up precaching for all our local files.
    // This makes the app load instantly offline.
    workbox.precaching.precacheAndRoute([
    "./",
    "index.html",
    "offline.html",
    "icon-512.png"
]);

    // Strategy for external CSS, JS libraries (e.g., from a CDN)
    // StaleWhileRevalidate: Serve from cache first (fast!), then check for updates in the background.
    workbox.routing.registerRoute(
        ({request}) => request.destination === 'script' || request.destination === 'style',
        new workbox.strategies.StaleWhileRevalidate({
            cacheName: `${CACHE_NAME_PREFIX}-external-assets-${CACHE_VERSION}`,
        })
    );
    
    // Strategy for fonts
    // CacheFirst: Once a font is downloaded, serve it from the cache forever.
    workbox.routing.registerRoute(
        ({request}) => request.destination === 'font',
        new workbox.strategies.CacheFirst({
            cacheName: `${CACHE_NAME_PREFIX}-fonts-${CACHE_VERSION}`,
            plugins: [
                new workbox.expiration.ExpirationPlugin({ maxEntries: 20, maxAgeSeconds: 365 * 24 * 60 * 60 }), // Cache for 1 year
            ],
        })
    );

    // Offline fallback for pages.
    // If you're offline and try to go to a page you've never visited, it shows offline.html
    const offlineFallback = 'offline.html';
    workbox.routing.setCatchHandler(async ({event}) => {
        if (event.request.destination === 'document') {
            return await caches.match(offlineFallback);
        }
        return Response.error();
    });

} else {
    console.log(`Workbox failed to load.`);
}
